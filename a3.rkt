#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 5915 0 28 3 10 #"#lang plai"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; CPSC 311 2016W1 assignment 3: Typed Fun type checker"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; BNF of this version of the Fun language:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; <Binding> ::= {<symbol> <E>}            ; used in Let*, below"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";  <E> ::= <num>"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";        | {+ <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";        | {- <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";        | {= <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";        | {< <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";        | {Let <symbol> <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";        | <symbol>"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";        | {Lam <symbol> <Type> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";        | {App <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";        | {Rec <symbol> <Type> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";        | {Let* <Binding>... <E>}     -----> syntactic sugar for Le"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #";                           ^"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                           zero or more"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";        | Btrue"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";        | Bfalse"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";        | {Ite <E> <E> <E>}         ; \"if-then-else\""
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";        | {Pair <E> <E>}"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";        | {Pair-case <E> {<symbol> <symbol> => <E>}}"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";        | {Leaf <Type>}             ; leaf node of tree"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";        | {Branch <E> <E> <E>}      ; branch node: key, left child,"
 #" right child"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";        | {Tree-case <E> {Leaf => <E>} {Branch <symbol> <symbol> <s"
 #"ymbol> => <E>}}"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";  <Type> ::= num"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";           | bool"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";           | {* <Type> <Type>}"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";           | {-> <Type> <Type>...}"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";                              ^ one or more"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";           | {tree <Type>}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Abstract syntax of types"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#"; To avoid confusion, the variants of Type begin with a T."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Tnum"
0 0 24 3 35 #"]                                  "
0 0 17 3 5 #"; num"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"Tbool"
0 0 24 3 34 #"]                                 "
0 0 17 3 6 #"; bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"T*"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 7 #")     ("
0 0 14 3 2 #"t2"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 8 #")]      "
0 0 17 3 18 #"; {* domain range}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"T->"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"domain"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 5 #")]   "
0 0 17 3 19 #"; {-> domain range}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"Ttree"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 21 #")]                   "
0 0 17 3 10 #"; {tree A}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 14 #"Typing-context"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"tc/empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 15 #"Typing-context?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Abstract syntax of E (Fun expressions):"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"Op"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"Plusop"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"Minusop"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"Equalsop"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"Lessthanop"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Abstract syntax of E:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 3 #"Op?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Let"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 10 #"named-expr"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"Id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 11 #"then-branch"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 11 #"else-branch"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 6 #"domain"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"argument"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 9 #"body-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 7 #"; pairs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 7 #"; trees"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 14 3 5 #"Type?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"Tree-case"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"leaf-branch"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 13 #"branch-branch"
0 0 24 3 1 #" "
0 0 14 3 2 #"E?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 81
(
 #"; Do *not* add variants to this definition! (unless you're doing a b"
 #"onus problem)"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Parser for Fun expressions"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"Bfalse"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"Btrue"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"Btrue"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         (["
0 0 14 3 4 #"head"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"args"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"arg-count"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 17 #"; {+ sexp1 sexp2}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 21 #";  ^ ^^^^^^^^^^^ args"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 6 #"; head"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Plusop"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"parse: + needs exactly 2 arguments\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"-"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Minusop"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"parse: - needs exactly 2 arguments\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"="
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Equalsop"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"parse: = needs exactly 2 arguments\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Lessthanop"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"parse: < needs exactly 2 arguments\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"Let*"
0 0 24 3 3 #") ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 21 3 1 #"0"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"parse: Let* with no body\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 21 3 1 #"1"
0 0 24 3 4 #")  ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 17 3 16 #"; arg-count >= 2"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 13 #"binding1-sexp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 13 #"binding1-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"x1-sexp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 13 #"binding1-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 7 #"e1-sexp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 13 #"binding1-sexp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 7 #"x1-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 7 #"x1-sexp"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 7 #"e1-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Let*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"parse: Let* needs a symbol\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"parse: each Let* binding must be bracketed\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Ite"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"parse needs exactly 3 arguments\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Lam"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"parse: lam must be followed by an identifier\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"parse: malformed `lam'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"App"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"parse: app needs 1 function and 1 argument\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Rec"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"parse: rec must be followed by an identifier\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"parse: malformed `rec'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"Let"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 10 #"named-sexp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 9 #"body-sexp"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 10 #"named-sexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"body-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"parse: malformed `Let'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"parse: malformed `Let'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"Pair"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"parse: malformed `pair'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 9 #"Pair-case"
0 0 24 3 3 #") ("
0 0 14 3 15 #"parse-pair-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"Leaf"
0 0 24 3 7 #")     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"parse: malformed `Leaf'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"Branch"
0 0 24 3 5 #")   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"parse: malformed `Branch'\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 9 #"Tree-case"
0 0 24 3 3 #") ("
0 0 14 3 15 #"parse-tree-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"parse: syntax error\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"parse: syntax error\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; parse-pair-case : sexp -> E"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"parse-pair-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"scrutinee"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"name1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 5 #"name2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 10 #"inner-sexp"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"Pair-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: malformed `pair-case'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: malformed `pair-case'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; parse-tree-case"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"parse-tree-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"arg-count"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"scrutinee"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"leaf-branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 16 #"leaf-branch-sexp"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"Branch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fifth"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"xKey"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 2 #"xL"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 2 #"xR"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 13 #"branch-branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"sixth"
0 0 24 3 1 #" "
0 0 14 3 18 #"branch-branch-sexp"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"Tree-case"
0 0 24 3 1 #" "
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 11 #"leaf-branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"xKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"xL"
0 0 24 3 1 #" "
0 0 14 3 2 #"xR"
0 0 24 3 1 #" "
0 0 14 3 13 #"branch-branch"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: malformed `Tree-case'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: malformed `Tree-case'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"parse: malformed `Tree-case'\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; build-> : listof Type -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Given (list A1 ... A(n-1) An), returns"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";    (T-> A1 (T-> A2 ... (T-> A(n-1) An)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Precondition: n >= 2"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"build->"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 3 #") ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 3 #") ("
0 0 14 3 7 #"build->"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; parse-type : sexp -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"num"
0 0 24 3 6 #")    ("
0 0 14 3 4 #"Tnum"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"bool"
0 0 24 3 5 #")   ("
0 0 14 3 5 #"Tbool"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"tree"
0 0 24 3 5 #")   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"tree must be written {tree <Type>}\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"Num"
0 0 24 3 6 #")    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"num (as a type) must not be capitalized\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"Bool"
0 0 24 3 5 #")   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"bool must not be capitalized\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"unknown type name\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"parse-type: empty\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (["
0 0 14 3 4 #"head"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"args"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"arg-count"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"case"
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 1 #"*"
0 0 24 3 6 #")    ("
0 0 14 3 2 #"T*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 2 #"->"
0 0 24 3 5 #")   ("
0 0 14 3 7 #"build->"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"tree"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Ttree"
0 0 24 3 2 #" ("
0 0 14 3 10 #"parse-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 4 #"Tree"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"tree must not be capitalized\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"unknown type constructor \""
0 0 24 3 1 #" "
0 0 14 3 4 #"head"
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"unknown animal in type\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; subst : E symbol E -> E"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; (subst e2 x e1) returns e1 with x replaced by e2."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Btrue"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"Btrue"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Let"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 2 #"eB"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 58
#"; same symbol; if x appears inside eB, it refers to *this*"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 59
#";  binding, not to the x we're replacing, so return same eB"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 7 #")      "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 55 #"; different symbol; leave y alone and replace inside eB"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 15 #"))             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             )]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eFun"
0 0 24 3 1 #" "
0 0 14 3 4 #"eArg"
0 0 24 3 3 #") ("
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"eFun"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"eArg"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 6 #")     "
0 0 17 3 46 #"; Rec binds y, so treat it the same way as Lam"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 5 #")   ("
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"Id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 2 #"e2"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 5 #")   ("
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 9 #"scrutinee"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 9 #"scrutinee"
0 0 24 3 2 #") "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ek"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"ek"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 6 #"eEmpty"
0 0 24 3 1 #" "
0 0 14 3 4 #"xkey"
0 0 24 3 1 #" "
0 0 14 3 5 #"xleft"
0 0 24 3 1 #" "
0 0 14 3 6 #"xright"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"eEmpty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 4 #"xkey"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 5 #"xleft"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 6 #"xright"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"xkey"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"xleft"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"xright"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 7 #"eBranch"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; racket-boolean-to-Fun-boolean : bool? -> E?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Postcondition: result is Bfalse or Btrue"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 29 #"racket-boolean-to-Fun-boolean"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"Bfalse"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; valid-binop : Op? E? E? -> boolean?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; valid-binop op v1 v2 returns true iff v1 and v2 are consistent wit"
 #"h op:"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";    If op is plusop or minusop, then v1 and v2 must be nums."
0 0 24 29 1 #"\n"
0 0 17 3 66
#";    If op is equalsop or lessthanop, then v1 and v2 must be nums."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Precondition: v1 and v2 are values (i.e., num, lam, Bfalse, or Btr"
 #"ue)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"valid-binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 2 #"Op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Plusop"
0 0 24 3 10 #" ()      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"Minusop"
0 0 24 3 9 #" ()     ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"Equalsop"
0 0 24 3 8 #" ()    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"Lessthanop"
0 0 24 3 6 #" ()  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Num?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 72
(
 #"; This code is redundant, but it makes it easy to match an operator "
 #"with"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 72
(
 #"; its valid arguments, and is easier to extend if we add operators w"
 #"hose"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 27 #"; arguments aren't numbers."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; apply-binop : Op? E? E? -> E?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; apply-binop op v1 v2 applies op to v1 and v2, returning an express"
 #"ion."
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Used in interp, below."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Precondition:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";    1.  v1 and v2 are values (i.e., num, lam, Bfalse, or Btrue)."
0 0 24 29 1 #"\n"
0 0 17 3 31 #";    2.  (valid-binop op v1 v2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";    If op is plusop or minusop, result is a num."
0 0 24 29 1 #"\n"
0 0 17 3 64
#";    If op is equalsop or lessthanop, result is Bfalse or Btrue."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"apply-binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 2 #"Op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Plusop"
0 0 24 3 10 #" ()      ("
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"Minusop"
0 0 24 3 9 #" ()     ("
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"Equalsop"
0 0 24 3 8 #" ()    ("
0 0 14 3 29 #"racket-boolean-to-Fun-boolean"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"Lessthanop"
0 0 24 3 6 #" ()  ("
0 0 14 3 29 #"racket-boolean-to-Fun-boolean"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"Num-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Interpreter for Fun expressions:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; interp : E? -> E?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Given an E e, return the E v such that"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";                e \342\207\223 v"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; according to the rules specified in Assignment 2."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #"; Values evaluate to themselves:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 9 #")       ("
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #")  ("
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 9 #" ()     ("
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Btrue"
0 0 24 3 10 #" ()      ("
0 0 14 3 5 #"Btrue"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 8 #")      ("
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 13 #"; Non-values:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"tried to apply non-lam\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"             ))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 2 #") "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 1 #"v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"valid-binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"apply-binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"binop applied to invalid arguments\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Let"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"Id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"free-variable\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 5 #"eCond"
0 0 24 3 1 #" "
0 0 14 3 5 #"eThen"
0 0 24 3 1 #" "
0 0 14 3 5 #"eElse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"vCond"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"eCond"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 5 #"vCond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 5 #"Btrue"
0 0 24 3 7 #" ()   ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"eThen"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 6 #" ()  ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"eElse"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Ite on a non-boolean\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 2 #"v2"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ePair"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"vPair"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"ePair"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 5 #"vPair"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")  ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"pair-case on a non-pair\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"vKey"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 4 #"eKey"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 2 #"vL"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 2 #"vR"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 14 3 4 #"vKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"vL"
0 0 24 3 1 #" "
0 0 14 3 2 #"vR"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" ("
0 0 14 3 5 #"eTree"
0 0 24 3 1 #" "
0 0 14 3 5 #"eLeaf"
0 0 24 3 1 #" "
0 0 14 3 4 #"xKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"xL"
0 0 24 3 1 #" "
0 0 14 3 2 #"xR"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"vTree"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"eTree"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 5 #"vTree"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 15 #")             ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"eLeaf"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"vL"
0 0 24 3 1 #" "
0 0 14 3 2 #"vR"
0 0 24 3 4 #")  ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"vR"
0 0 24 3 1 #" "
0 0 14 3 2 #"xR"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 2 #"vL"
0 0 24 3 1 #" "
0 0 14 3 2 #"xL"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 5 #"subst"
0 0 24 3 1 #" "
0 0 14 3 4 #"vKey"
0 0 24 3 1 #" "
0 0 14 3 4 #"xKey"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"tree-case on a non-tree\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"unparse-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 2 #"Op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Plusop"
0 0 24 3 9 #" ()      "
0 0 21 3 1 #"`"
0 0 14 3 1 #"+"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"Minusop"
0 0 24 3 8 #" ()     "
0 0 21 3 1 #"`"
0 0 14 3 1 #"-"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"Equalsop"
0 0 24 3 7 #" ()    "
0 0 21 3 1 #"`"
0 0 14 3 1 #"="
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"Lessthanop"
0 0 24 3 5 #" ()  "
0 0 21 3 1 #"`"
0 0 14 3 1 #"<"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; unparse-type : (or false Type) -> (or false sexp)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Given abstract syntax type A, return its concrete syntax (s-expres"
 #"sion)."
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Or, if given #false, return #false."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"Tnum"
0 0 24 3 16 #" ()             "
0 0 21 3 1 #"`"
0 0 14 3 3 #"num"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"Tbool"
0 0 24 3 15 #" ()            "
0 0 21 3 1 #"`"
0 0 14 3 4 #"bool"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"domain"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 3 #")  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"domain"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 2 #"T*"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 10 #")         "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 2 #"  "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"Ttree"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 12 #")           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 20 #")                   "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 11 #")          "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 10 #"unparse-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"Id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 21 #")                    "
0 0 14 3 1 #"x"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Let"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 14 #")             "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"eB"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 13 #")            "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 16 #")               "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"App"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 13 #")            "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 20 #" ()                 "
0 0 21 3 1 #"`"
0 0 14 3 6 #"Bfalse"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Btrue"
0 0 24 3 21 #" ()                  "
0 0 21 3 1 #"`"
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 14 #")             "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 15 #")              "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 9 #"Pair-case"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 28 3 1 #","
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 19 #")                  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"unparse-type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 8 #")       "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 4 #"eKey"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 5 #"eLeaf"
0 0 24 3 1 #" "
0 0 14 3 2 #"xk"
0 0 24 3 1 #" "
0 0 14 3 2 #"xl"
0 0 24 3 1 #" "
0 0 14 3 2 #"xr"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 9 #"Tree-case"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"Leaf"
0 0 24 3 15 #"               "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 5 #"eLeaf"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"xk"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"xl"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"xr"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"do-parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 12 #"abstract-exp"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 12 #"concrete-exp"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 12 #"abstract-exp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"          input: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"abstract syntax: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"abstract-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"unparsed syntax: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"concrete-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"do-parse-interp"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 12 #"abstract-exp"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 12 #"concrete-exp"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 12 #"abstract-exp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"          input: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"abstract syntax: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"abstract-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"unparsed syntax: ~v\\n\\n\""
0 0 24 3 1 #" "
0 0 14 3 12 #"concrete-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 12 #"abstract-exp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"\\nresult of evaluation: ~v\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"     unparsed result: ~v\\n\\n\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"unparse"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; look-up-type : Typing-context symbol -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"look-up-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 14 #"Typing-context"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"tc/empty"
0 0 24 3 6 #" ()  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"look-up-type: not in scope: \""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 3 9 #")       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 12 #"look-up-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"context"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; type=? : Type Type -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Check that two types are equal."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 9 #"         "
0 0 17 3 31 #"; weed out stray #false results"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 1 #"B"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 35 #"; [Tnum ()  handled by else branch]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 35 #"; [Tbool () handled by else branch]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"T*"
0 0 24 3 2 #" ("
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 5 #")   ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #" ["
0 0 14 3 2 #"T*"
0 0 24 3 2 #" ("
0 0 14 3 2 #"B1"
0 0 24 3 1 #" "
0 0 14 3 2 #"B2"
0 0 24 3 5 #")   ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"B1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 1 #" "
0 0 14 3 2 #"B2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 4 #")  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #" ["
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 2 #"B1"
0 0 24 3 1 #" "
0 0 14 3 2 #"B2"
0 0 24 3 4 #")  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"B1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 1 #" "
0 0 14 3 2 #"B2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"Ttree"
0 0 24 3 2 #" ("
0 0 14 3 2 #"A0"
0 0 24 3 5 #")   ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 5 #"Ttree"
0 0 24 3 2 #" ("
0 0 14 3 2 #"B0"
0 0 24 3 7 #")     ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"A0"
0 0 24 3 1 #" "
0 0 14 3 2 #"B0"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; op-signature : Op -> Type"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"op-signature"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 7 #"num*num"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"T*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tnum"
0 0 24 3 3 #") ("
0 0 14 3 4 #"Tnum"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 12 #"num*num->num"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"T->"
0 0 24 3 1 #" "
0 0 14 3 7 #"num*num"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Tnum"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 13 #"num*num->bool"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"T->"
0 0 24 3 1 #" "
0 0 14 3 7 #"num*num"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Tbool"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 2 #"Op"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 6 #"Plusop"
0 0 24 3 8 #" ()     "
0 0 14 3 12 #"num*num->num"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"Minusop"
0 0 24 3 7 #" ()    "
0 0 14 3 12 #"num*num->num"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 10 #"Lessthanop"
0 0 24 3 4 #" () "
0 0 14 3 13 #"num*num->bool"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 8 #"Equalsop"
0 0 24 3 6 #" ()   "
0 0 14 3 13 #"num*num->bool"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; typeof : Typing-context E -> (or false Type)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 17 #")               ("
0 0 14 3 4 #"Tnum"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Binop"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 8 #")      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"A1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 2 #"A2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 2 #"A2"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 2 #" ("
0 0 14 3 12 #"op-signature"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"domain"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 6 #"domain"
0 0 24 3 2 #" ("
0 0 14 3 2 #"T*"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 5 #"range"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 21 3 6 #"#false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"strange op signature: \""
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 5 #"\" : \""
0 0 24 3 2 #" ("
0 0 14 3 12 #"op-signature"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 7 #"))])))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Bfalse"
0 0 24 3 17 #" ()             ("
0 0 14 3 5 #"Tbool"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"Btrue"
0 0 24 3 18 #" ()              ("
0 0 14 3 5 #"Tbool"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 5 #"eThen"
0 0 24 3 1 #" "
0 0 14 3 5 #"eElse"
0 0 24 3 5 #")   ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Tbool?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"AThen"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 5 #"eThen"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 5 #"AElse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 5 #"eElse"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"AThen"
0 0 24 3 1 #" "
0 0 14 3 5 #"AElse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 5 #"AThen"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 2 #"Id"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 18 #")                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 12 #"look-up-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"unbound identifier ~v~n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 21 3 6 #"#false"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Let"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 8 #")      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 11 #"tc-extended"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ["
0 0 14 3 1 #"B"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 11 #"tc-extended"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Lam"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 9 #")       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 11 #"tc-extended"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 11 #"tc-extended"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"T->"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 9 #")       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 11 #"tc-extended"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 2 #"B2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 11 #"tc-extended"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 2 #"B2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 1 #"B"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"App"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eFun"
0 0 24 3 1 #" "
0 0 14 3 4 #"eArg"
0 0 24 3 9 #")       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"AFun"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 4 #"eFun"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 4 #"AArg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 4 #"eArg"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 4 #"AFun"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 4 #"AFun"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 3 #"T->"
0 0 24 3 2 #" ("
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 4 #")  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 4 #"AArg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 14 3 2 #"A2"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 10 #"          "
0 0 21 3 6 #"#false"
0 0 24 3 5 #"])))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Pair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 12 #")          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"A1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 2 #"A2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"T*"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Pair-case"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"eType"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 4 #"Type"
0 0 24 3 1 #" "
0 0 14 3 5 #"eType"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 2 #"T*"
0 0 24 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 2 #"A1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 2 #"A2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 11 #"tc-extended"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 1 #" "
0 0 14 3 2 #"tc"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 17 #"tc-fully-extended"
0 0 24 3 2 #" ("
0 0 14 3 10 #"tc/cons-tp"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 1 #" "
0 0 14 3 11 #"tc-extended"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 24 3 1 #" "
0 0 14 3 17 #"tc-fully-extended"
0 0 24 3 1 #" "
0 0 14 3 5 #"eBody"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"A1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"type=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 1 #" "
0 0 14 3 2 #"A2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 1 #"B"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 4 #"]))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 3 #"; ["
0 0 17 3 2 #"A1"
0 0 17 3 2 #" ("
0 0 17 3 6 #"typeof"
0 0 17 3 1 #" "
0 0 17 3 2 #"tc"
0 0 17 3 1 #" "
0 0 17 3 4 #"x1)]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 3 #"; ["
0 0 17 3 2 #"A2"
0 0 17 3 2 #" ("
0 0 17 3 6 #"typeof"
0 0 17 3 1 #" "
0 0 17 3 2 #"tc"
0 0 17 3 1 #" "
0 0 17 3 4 #"x2)]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 3 #"; ["
0 0 17 3 11 #"tc-extended"
0 0 17 3 2 #" ("
0 0 17 3 10 #"tc/cons-tp"
0 0 17 3 1 #" "
0 0 17 3 2 #"x1"
0 0 17 3 1 #" "
0 0 17 3 2 #"A1"
0 0 17 3 1 #" "
0 0 17 3 4 #"tc)]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 3 #"; ["
0 0 17 3 17 #"tc-fully-extended"
0 0 17 3 2 #" ("
0 0 17 3 10 #"tc/cons-tp"
0 0 17 3 1 #" "
0 0 17 3 2 #"x2"
0 0 17 3 1 #" "
0 0 17 3 2 #"A2"
0 0 17 3 1 #" "
0 0 17 3 13 #"tc-extended)]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 17 3 3 #"; ["
0 0 17 3 1 #"B"
0 0 17 3 2 #" ("
0 0 17 3 6 #"typeof"
0 0 17 3 1 #" "
0 0 17 3 17 #"tc-fully-extended"
0 0 17 3 1 #" "
0 0 17 3 8 #"eBody)])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 2 #";("
0 0 17 3 9 #"type-case"
0 0 17 3 1 #" "
0 0 17 3 4 #"Type"
0 0 17 3 6 #" eType"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 2 #";["
0 0 17 3 2 #"T*"
0 0 17 3 2 #" ("
0 0 17 3 2 #"t1"
0 0 17 3 1 #" "
0 0 17 3 3 #"t2)"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 17 3 2 #";("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 6 #"type=?"
0 0 17 3 1 #" "
0 0 17 3 2 #"t1"
0 0 17 3 1 #" "
0 0 17 3 2 #"A1"
0 0 17 3 3 #") ("
0 0 17 3 6 #"type=?"
0 0 17 3 1 #" "
0 0 17 3 2 #"t2"
0 0 17 3 1 #" "
0 0 17 3 4 #"A2))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 2 #"; "
0 0 17 3 3 #"B)]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 2 #";["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 5 #"error"
0 0 17 3 1 #" "
0 0 17 3 33 #"\"bad arguments for the pair\")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"Leaf"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 17 #")               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"unimplemented\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"Branch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"eL"
0 0 24 3 1 #" "
0 0 14 3 2 #"eR"
0 0 24 3 6 #")    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"unimplemented\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 5 #"eLeaf"
0 0 24 3 1 #" "
0 0 14 3 4 #"xKey"
0 0 24 3 1 #" "
0 0 14 3 2 #"xL"
0 0 24 3 1 #" "
0 0 14 3 2 #"xR"
0 0 24 3 1 #" "
0 0 14 3 7 #"eBranch"
0 0 24 3 6 #")     "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"unimplemented\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"typeof"
0 0 24 3 2 #" ("
0 0 14 3 8 #"tc/empty"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; (typeof-program (parse '{Ite Bfalse {Let x Btrue x} y}))   ; y not"
 #" in scope"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; (interp         (parse '{Ite Bfalse {Let x Btrue x} y}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; (typeof-program (parse '{Ite Btrue {Let x Btrue x} y}))  ; y not i"
 #"n scope"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"interp"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Ite"
0 0 24 3 1 #" "
0 0 14 3 6 #"Bfalse"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"typeof-program"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"Let*"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          {"
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         {"
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         {"
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    {"
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" {"
0 0 14 3 3 #"App"
0 0 24 3 2 #" {"
0 0 14 3 3 #"App"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 9 #"}}}}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          {"
0 0 14 3 4 #"fact"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Rec"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #" {"
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" {"
0 0 14 3 3 #"Ite"
0 0 24 3 2 #" {"
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    {"
0 0 14 3 3 #"Let"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 3 #"App"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         {"
0 0 14 3 3 #"App"
0 0 24 3 2 #" {"
0 0 14 3 3 #"App"
0 0 24 3 1 #" "
0 0 14 3 8 #"multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"} "
0 0 14 3 1 #"c"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          {"
0 0 14 3 3 #"App"
0 0 24 3 1 #" "
0 0 14 3 4 #"fact"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Problem 3"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; In each part, if you find a Fun expression that matches the proble"
 #"m"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; specification, write it (as abstract syntax, or call parse on conc"
 #"rete syntax)"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #"; in place of #false."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; If you do not think such an expression exists, leave #false in pla"
 #"ce"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#"; and write a comment to *briefly* explain why you think there is no"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; such expression."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; You can use pairs and lists in these expressions **ONLY** if you h"
 #"ave"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; completed those problems.  So you can't use the (error \"unimpleme"
 #"nted\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; branches we left in `typeof' to claim that an expression doesn't t"
 #"ypecheck."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Part 3a (evaluates; rejected by typeof)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3a"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Part 3b (does not evaluate; accepted by typeof)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3b"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"Rec"
0 0 24 3 2 #" ("
0 0 14 3 2 #"Id"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Part 3c (evaluates to a lam, has type {-> bool bool},"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";          and evaluates to a value iff its argument is Bfalse)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3c"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 6 #"#false"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Part 3d (has type {-> {-> bool bool} bool}"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";          and, when applied to any function f of type {-> bool bool"
 #"},"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";          evaluates to a value iff {App f Bfalse} evaluates to a va"
 #"lue)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3d"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 6 #"#false"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Part 3e: same as 3d, but evaluates to a value"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";                      iff {App f Bfalse} does *not* evaluate to a v"
 #"alue"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3e"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 6 #"#false"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Tests to check that you either have #false, or an expression"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; (not necessarily well-typed!)."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; If any of these 5 tests fail, you will receive 0 marks for Problem"
 #" 3."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3a"
0 0 24 3 3 #") ("
0 0 14 3 2 #"E?"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3a"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3b"
0 0 24 3 3 #") ("
0 0 14 3 2 #"E?"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3b"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3c"
0 0 24 3 3 #") ("
0 0 14 3 2 #"E?"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3c"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3d"
0 0 24 3 3 #") ("
0 0 14 3 2 #"E?"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3d"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3e"
0 0 24 3 3 #") ("
0 0 14 3 2 #"E?"
0 0 24 3 1 #" "
0 0 14 3 7 #"expr-3e"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"Btrue"
0 0 24 3 5 #"})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"Pair"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #"})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"Lam"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 5 #"})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"}))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 5 #"}})) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" {"
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 4 #"}} {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"} {"
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 6 #"}})) ("
0 0 14 3 10 #"parse-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"unparse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"Tree-case"
0 0 24 3 2 #" {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"Leaf"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"} {"
0 0 14 3 6 #"Branch"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #"}}))) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
